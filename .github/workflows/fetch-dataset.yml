name: Fetch dataset and bundle them
on:
  workflow_dispatch:
    inputs:
      scheme:
        required: true
        description: Scheme of resource identifier
        type: choice
        default: mg
        options:
          - dm
          - mg
          - youget
      id:
        required: true
        description: Dataset resource identifier
      rename:
        description: Rename the dataset
defaults:
  run:
    shell: bash
env:
  resScheme: ${{ inputs.scheme }}
  resId: ${{ inputs.id }}
  resRename: ${{ inputs.rename }}
jobs:
  aio:
    name: AIO
    runs-on: ubuntu-22.04
    steps:
      - name: Setup environment
        run: |
          if test "$resScheme" = mg;then
            sudo apt-get install --no-install-recommends -y megatools
          elif test "$resScheme" = dm; then
            go install github.com/bake/mdl@latest
          elif test "$resScheme" = youget; then
            sudo apt-get install --no-install-recommends -y ffmpeg
            sudo pip install yt-dlp
          fi
      - name: Fetch dataset
        run: |
          mkdir d/
          mg() {
            local useURI=($(printf %s "$resId" | grep -oEe '((https://|http://|)mega\.(|\.co)nz/(file|folder|#)/[-#0-9A-Za-z!_]+)'))
            if [[ "${#useURI}" -gt 0 ]];then
              megadl --path ./d/ "${useURI[@]}"
            else
              false
            fi
          }
          youget() {
            local useURI=($(printf %s "$resId" | grep -oEe '((https://|http://|)[^/]+/[-/#0-9A-Za-z!_?]+)'))
            if [[ "${#useURI}" -gt 0 ]];then
              printf '%s\n' "${useURI}" | env -C d yt-dlp --embed-metadata -a -
            else
              false
            fi
          }
          dm() {
            export PATH=$PATH:$HOME/go/bin
            local useURI="$(printf %s "$resId" | grep -oEe '(https://www\.do.gm.n.anhua\.cn/[^ ]+)' | tail -n1)"
            if [[ "${#useURI}" -ne 0 ]]; then
              mdl -format=png -out=./d -worker=1 "$useURI"
            else
              false
            fi
          }
          set -x
          if test "$resScheme" = mg;then mg
          elif test "$resScheme" = dm;then dm
          elif test "$resScheme" = youget;then youget
          else
            false
          fi
          if test -n "$resRename";then
            local testfn="$(basename -- "$resRename")"
            if test "${#testfn}" -gt 1 && test "$testfn" != /;then
              export finalFilename="$testfn"
            else
              export finalFilename="$(basename -- "${useURI}")"
            fi
          else
            export finalFilename="$(basename -- "${useURI}")"
          fi
          echo finalFilename=$finalFilename >> $GITHUB_ENV
      - name: bundle
        run: |
          cd d/
          tar -cf ../"$finalFilename".t .
      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          path: ${{ env.finalFilename }}.t
          name: ${{ env.finalFilename }}.t.zip
          if-no-files-found: error
